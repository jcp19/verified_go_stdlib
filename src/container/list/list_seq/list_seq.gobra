// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package list implements a doubly linked list.
//
// To iterate over a list (where l is a *List):
//
//	for e := l.Front(); e != nil; e = e.Next() {
//		// do something with e.Value
//	}

// +gobra

package list_seq

// Element is an element of a linked list.
type Element struct {
	// Next and previous pointers in the doubly-linked list of elements.
	// To simplify the implementation, internally a list l is implemented
	// as a ring, such that &l.root is both the next element of the last
	// list element (l.Back()) and the previous element of the first list
	// element (l.Front()).
	next, prev *Element

	// The list to which this element belongs.
	list *List

	// The value stored with this element.
	Value any
}

// Next returns the next list element or nil.
trusted
func (e *Element) Next() *Element {
	if p := e.next; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

// Prev returns the previous list element or nil.
trusted
func (e *Element) Prev() *Element {
	if p := e.prev; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

// List represents a doubly linked list.
// The zero value for List is an empty list ready to use.
type List struct {
	root Element // sentinel list element, only &root, root.prev, and root.next are used
	lenT  int     // current list length excluding (this) sentinel element
}

pred (l *List) Mem(ghost s seq[*Element], isInit bool) {
	//(forall idx int :: 0 <= idx && idx <= l.lenT ==> (acc(&(s[idx]).next) && acc(&(s[idx]).prev) && acc(&(s[idx]).list) && acc(&(s[idx]).Value))) && //consider changing list permissions to 1/2

	 //&&
	//(forall i *Element :: i in s ==> ((i != &l.root ==> i.list == l) && i.next in s && i.prev in s && i.next.prev == i && i.prev.next == i))

	acc(&l.lenT) &&
	&l.root in s &&
	s[0] == &l.root &&
	(forall i *Element :: i in s ==> (acc(&i.next) && acc(&i.prev) && acc(&i.list) && acc(&i.Value))) && //consider changing list permissions to 1/2
	//(forall idx int :: 0 <= idx && idx <= l.lenT ==> (acc(&(s[idx]).next) && acc(&(s[idx]).prev) && acc(&(s[idx]).list) && acc(&(s[idx]).Value))) &&
	((l.root.next == nil || l.root.prev == nil) ==> !isInit) &&
	(!isInit ==> ((len(s)==1 && s == seq[*Element]{&l.root}) && (l.root.next == nil && l.root.prev == nil))) &&
	(isInit ==> (
		len(s) >= 1 &&
		l.lenT == len(s)-1 &&
		s[0].prev == s[l.lenT] &&
		s[l.lenT].next == s[0] &&
		(forall i *Element :: i in s ==> (i.next != nil && i.prev != nil && (i != &l.root ==> i.list == l))) &&
		(forall i, j *Element :: ((i in s && i.next == j) ==> (j in s && j.prev == i && i.next.prev == i && j.prev.next == j))) &&
		(forall i, j *Element :: ((i in s && i.prev == j) ==> (j in s && j.next == i && i.prev.next == i && j.next.prev == j))) &&
		(forall idx int :: 0 <= idx && idx < l.lenT ==> (s[idx].next == s[idx+1] && s[idx] == s[idx+1].prev)) && //# redundant?
		(forall idx int :: 0 < idx && idx <= l.lenT ==> (s[idx].prev == s[idx-1] && s[idx] == s[idx-1].next && s[idx].list == l))))
}

// Init initializes or clears list l.
requires l.Mem(elems, isInit)
ensures  res == l
ensures  l.Mem(seq[*Element]{&l.root}, true)
decreases
func (l *List) Init(ghost elems seq[*Element], ghost isInit bool) (res *List) {
	unfold l.Mem(elems, isInit)
	l.root.next = &l.root
	l.root.prev = &l.root
	l.lenT = 0
	fold l.Mem(seq[*Element]{&l.root}, true)
	return l
}

// New returns an initialized list.
ensures l.Mem(seq[*Element]{&l.root}, true)
decreases
func New() (l *List) {
	l = new(List)
	fold l.Mem(seq[*Element]{&l.root}, false)
	l.Init(seq[*Element]{&l.root}, false)
}

// lenT returns the number of elements of list l.
// The complexity is O(1).
requires l.Mem(elems, true)
ensures  unfolding l.Mem(elems, true) in res==l.lenT
decreases
pure func (l *List) Len(ghost elems seq[*Element]) (res int) {
	return unfolding l.Mem(elems, true) in l.lenT
}

// Front returns the first element of list l or nil if the list is empty.
requires acc(l.Mem(elems, true),1/2)
ensures  acc(l.Mem(elems, true),1/2)
ensures  unfolding acc(l.Mem(elems, true),1/2) in ((l.lenT == 0) ==> res == nil) && ((l.lenT != 0) ==> (res == l.root.next && elems[1] == res))
decreases
func (l *List) Front(ghost elems seq[*Element]) (res *Element) {
	unfold acc(l.Mem(elems, true),1/2)
	if l.lenT == 0 {
		fold acc(l.Mem(elems, true),1/2)
		return nil
	}
	res = l.root.next
	fold acc(l.Mem(elems, true),1/2)
}

// Back returns the last element of list l or nil if the list is empty.
requires acc(l.Mem(elems, true),1/2)
ensures  acc(l.Mem(elems, true),1/2)
ensures  unfolding acc(l.Mem(elems, true),1/2) in ((l.lenT == 0) ==> res == nil) && ((l.lenT != 0) ==> (res == l.root.prev && elems[l.lenT] == res))
decreases
func (l *List) Back(ghost elems seq[*Element]) (res *Element) {
	unfold acc(l.Mem(elems, true),1/2)
	if l.lenT == 0 {
		fold acc(l.Mem(elems, true),1/2)
		return nil
	}
	res = l.root.prev
	fold acc(l.Mem(elems, true),1/2)
}

// lazyInit lazily initializes a zero List value.
requires l.Mem(elems, isInit)
ensures  l.Mem(elems, true)
decreases
func (l *List) lazyInit(ghost elems seq[*Element], ghost isInit bool) {
	unfold l.Mem(elems, isInit)
	if l.root.next == nil {
		//# Here isInit==false is implied
		fold l.Mem(elems, isInit)
		l.Init(elems, false)
		return //# Added this return because the fold only needs to happen in the else-case. Init already returns the predicate with isInit==true.
	}
	fold l.Mem(elems, true)
}


/*
requires l.Mem(elems, true)
requires unfolding l.Mem(elems,true) in len(elems) == 100
ensures l.Mem(elems, true)
//ensures elems == res
ensures len(res) == 100
func (l *List) testSeq( ghost elems seq[*Element]) (ghost res seq[*Element]){
	res = elems[:50]++elems[50:]
}*/

//# does not terminate after 16 hours
requires l.Mem(elems, true)
requires unfolding l.Mem(elems, true) in (0 <= at_idx && at_idx <= l.lenT)
requires acc(e)
requires elems[at_idx] == at
requires !(e in elems)
ensures  l.Mem((elems[:at_idx]++(seq[*Element]{e})++elems[at_idx:]), true)
func (l *List) insert(e, at *Element, ghost elems seq[*Element], ghost at_idx int) (res *Element) {
	unfold l.Mem(elems, true)
	e.prev = at
	e.next = at.next
	e.prev.next = e
	e.next.prev = e
	assert at == e.prev
	e.list = l
	l.lenT++
	res = e
	fold l.Mem((elems[:at_idx]++(seq[*Element]{e})++elems[at_idx:]), true)
	//# sequence is more tricky for changes at random locations in the list but very convenient for beginning/end
}

// insertValue is a convenience wrapper for insert(&Element{Value: v}, at).
trusted
func (l *List) insertValue(v any, at *Element) *Element {
	return l.insert(&Element{Value: v}, at)
}

// remove removes e from its list, decrements l.lenT
trusted
func (l *List) remove(e *Element) {
	e.prev.next = e.next
	e.next.prev = e.prev
	e.next = nil // avoid memory leaks
	e.prev = nil // avoid memory leaks
	e.list = nil
	l.lenT--
}

// move moves e to next to at.
trusted
func (l *List) move(e, at *Element) {
	if e == at {
		return
	}
	e.prev.next = e.next
	e.next.prev = e.prev

	e.prev = at
	e.next = at.next
	e.prev.next = e
	e.next.prev = e
}

// Remove removes e from l if e is an element of list l.
// It returns the element value e.Value.
// The element must not be nil.
trusted
func (l *List) Remove(e *Element) any {
	if e.list == l {
		// if e.list == l, l must have been initialized when e was inserted
		// in l or l == nil (e is a zero Element) and l.remove will crash
		l.remove(e)
	}
	return e.Value
}

// PushFront inserts a new element e with value v at the front of list l and returns e.
trusted
func (l *List) PushFront(v any) *Element {
	l.lazyInit()
	return l.insertValue(v, &l.root)
}

// PushBack inserts a new element e with value v at the back of list l and returns e.
trusted
func (l *List) PushBack(v any) *Element {
	l.lazyInit()
	return l.insertValue(v, l.root.prev)
}

// InsertBefore inserts a new element e with value v immediately before mark and returns e.
// If mark is not an element of l, the list is not modified.
// The mark must not be nil.
trusted
func (l *List) InsertBefore(v any, mark *Element) *Element {
	if mark.list != l {
		return nil
	}
	// see comment in List.Remove about initialization of l
	return l.insertValue(v, mark.prev)
}

// InsertAfter inserts a new element e with value v immediately after mark and returns e.
// If mark is not an element of l, the list is not modified.
// The mark must not be nil.
trusted
func (l *List) InsertAfter(v any, mark *Element) *Element {
	if mark.list != l {
		return nil
	}
	// see comment in List.Remove about initialization of l
	return l.insertValue(v, mark)
}

// MoveToFront moves element e to the front of list l.
// If e is not an element of l, the list is not modified.
// The element must not be nil.
trusted
func (l *List) MoveToFront(e *Element) {
	if e.list != l || l.root.next == e {
		return
	}
	// see comment in List.Remove about initialization of l
	l.move(e, &l.root)
}

// MoveToBack moves element e to the back of list l.
// If e is not an element of l, the list is not modified.
// The element must not be nil.
trusted
func (l *List) MoveToBack(e *Element) {
	if e.list != l || l.root.prev == e {
		return
	}
	// see comment in List.Remove about initialization of l
	l.move(e, l.root.prev)
}

// MoveBefore moves element e to its new position before mark.
// If e or mark is not an element of l, or e == mark, the list is not modified.
// The element and mark must not be nil.
trusted
func (l *List) MoveBefore(e, mark *Element) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.move(e, mark.prev)
}

// MoveAfter moves element e to its new position after mark.
// If e or mark is not an element of l, or e == mark, the list is not modified.
// The element and mark must not be nil.
trusted
func (l *List) MoveAfter(e, mark *Element) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.move(e, mark)
}

// PushBackList inserts a copy of another list at the back of list l.
// The lists l and other may be the same. They must not be nil.
trusted
func (l *List) PushBackList(other *List) {
	l.lazyInit()
	for i, e := other.lenT(), other.Front(); i > 0; i, e = i-1, e.Next() {
		l.insertValue(e.Value, l.root.prev)
	}
}

// PushFrontList inserts a copy of another list at the front of list l.
// The lists l and other may be the same. They must not be nil.
trusted
func (l *List) PushFrontList(other *List) {
	l.lazyInit()
	for i, e := other.lenT(), other.Back(); i > 0; i, e = i-1, e.Prev() {
		l.insertValue(e.Value, &l.root)
	}
}
