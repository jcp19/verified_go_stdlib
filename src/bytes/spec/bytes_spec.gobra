package spec

// +gobra

import (
	sl "verification/utils/slices"
)

ghost
requires acc(sl.Bytes(ub, 0, len(ub)), _)
ensures len(res) == len(ub)
ensures forall i int :: { res[i] } 0 <= i && i < len(ub) ==>
    res[i] == sl.GetByte(ub, 0, len(ub), i)
decreases _
pure func View(ub []byte) (res seq[byte])

// TODO: make this opaque
ghost
requires count >= 0
decreases count
pure func SpecRepeat(b seq[byte], count int) (res seq[byte]) {
	return count == 0 ? seq[byte]{} : ( b ++ SpecRepeat(b, count - 1) )
}


ghost
requires low <= high
ensures res == exists i int :: {i in s} i in s && low <= i && i < high
opaque
decreases high - low
pure func SetContainsInRange(s set[int], low, high int) (res bool) {
	return low < high && (low in s || ( low < high && SetContainsInRange(s, low + 1, high) ))
}

// returns true if a == a0 ++ b ++ a1 for some a0, a1
ghost
requires 0 <= i && i + len(b) <= len(a)
decreases
pure func SubviewEq(a, b seq[byte], i int) (res bool) {
	return a[i:i+len(b)] == b
}
