package slices

//+gobra


pred Runes(s []rune, start int, end int) {
	// start inclusive
	0 <= start &&
	start <= end &&
	// end exclusive
	end <= cap(s) &&
	forall i int :: { &s[i] } start <= i && i < end ==> acc(&s[i])
}

pure
requires acc(Runes(s, start, end), _)
requires start <= i && i < end
decreases
func GetRune(s []rune, start int, end int, i int) rune {
	return unfolding acc(Runes(s, start, end), _) in s[i]
}

ghost
requires acc(Runes(ub, 0, len(ub)), _)
ensures len(res) == len(ub)
ensures forall i int :: { res[i] } 0 <= i && i < len(ub) ==>
    res[i] == GetRune(ub, 0, len(ub), i)
decreases _
pure func ViewRunes(ub []rune) (res seq[rune])
