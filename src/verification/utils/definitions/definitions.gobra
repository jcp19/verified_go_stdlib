// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package definitions

const HalfPerm perm = 1/2
const (
	R00 perm = 1/(2 << iota)
	R0
	R1
	R2
	R3
	R4
	R5
	R6
	R7
	R8
	R9
	R10
	R11
	R12
	R13
	R14
	R15
	R16
	R17
	R18
	R19
	R20
	R21
	R22
	R23
	R24
	R25
	R26
	R27
	R28
	R29
	R30
	R31
	R32
	R33
	R34
	R35
	R36
	R37
	R38
	R39
	R40
	R41
	R42
	R43
	R44
	R45
	R46
	R47
	R48
	R49
	R50
)

ghost
decreases
ensures res <= a && res <= b && (res == a || res == b)
pure func
MinInt(a, b int) (res int) {
	return a < b ? a : b;
}

ghost
decreases
pure func
MaxInt(a, b int) (res int) {
	return a < b ? a : b;
}


// Kills the branches that reach this point.
ghost
ensures false
decreases _
func TODO()

ghost
ensures res == (low <= i && i < high)
decreases _
pure func InRange(i, low, high int) (res bool) {
	return low <= i && i < high
}

ghost
ensures res == (low <= i && i <= high)
decreases _
pure func InRangeInc(i, low, high int) (res bool) {
	return low <= i && i <= high
}

ghost
requires 0 <= low && low <= high && high <= len(s)
ensures forall i int :: {&s[low:high][i]} 0 <= i && i < len(s[low:high]) ==> &s[low:high][i] == &s[i+low]
decreases
func SubSliceOverlaps(s []byte, low, high int) {

}

ghost
requires 0 <= start && start <= end && end <= len(a)
requires a[start:end] === b
ensures forall i int :: { &a[i] }{ &b[i] } InRange(i, start, end) ==> &a[i] == &b[i - start]
decreases
func lemmaSliceGhostEquals(a, b []byte, start, end int) {
}
